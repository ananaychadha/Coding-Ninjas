
class treeNode:
    def __init__(self, data):
        self.data = data
        self.children = []


def nextLargestHelper(tree,n):
    if tree==None:
        return 999999
    ans=999999
    if tree.data>n:
        ans=min(ans,tree.data)
    for child in tree.children:
        ans=min(ans,nextLargestHelper(child,n))
    return ans


def createLevelWiseTree(arr):
    root = treeNode(int(arr[0]))
    q = [root]
    size = len(arr)
    i = 1
    while i<size:
        parent = q.pop(0)
        childCount = int(arr[i])
        i += 1
        for j in range(0,childCount):
            temp = treeNode(int(arr[i+j]))
            parent.children.append(temp)
            q.append(temp)
        i += childCount
    return root

# Main
n = int(input())
arr = list(int(x) for x in input().strip().split(' '))
tree = createLevelWiseTree(arr)
ans=nextLargestHelper(tree, n)
print(nextLargestHelper(tree, n))

