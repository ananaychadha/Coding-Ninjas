## Read input as specified in the question.
## Print output as specified in the question.
import sys
class graph:
    def __init__(self,v):
        self.v=v
        self.adjmatrix=[[0 for i in range(v)]for j in range(v)]
    def addedge(self,v1,v2,wt):
        self.adjmatrix[v1][v2]=wt
        self.adjmatrix[v2][v1]=wt
        

    def get_minvertex(self,visited,weight):
        min_vertex=-1
        for i in range(self.v):
            if(visited[i] is False and (min_vertex==-1 or weight[min_vertex]>weight[i])):
                min_vertex=i
        return min_vertex
    
    
    def prims(self):
        visited = [False for i in range(self.v)]
        parent=[-1 for i in range(self.v)]
        weight=[sys.maxsize for i in range(self.v)]
        weight[0]=0
        for i in range(self.v-1):
            min_vertex=self.get_minvertex(visited,weight)
            visited[min_vertex]=True
            for j in range(self.v):
                if self.adjmatrix[min_vertex][j]>0 and visited[j]is False:
                    if(weight[j]>self.adjmatrix[min_vertex][j]):
                        weight[j]=self.adjmatrix[min_vertex][j]
                        parent[j]=min_vertex
                
        for i in range(1,self.v):
            if i <parent[i]:
                print(str(i)+ " " + str(parent[i])+" "+str(weight[i]))
            else:
                print(str(parent[i])+" " + (str(i))+" "+str(weight[i]))

                      
li=[int(ele) for ele in input().split()]
n=li[0]
e=li[1]
g=graph(n)
for i in range(e):
    curr_input=[int(ele) for ele in input().split()]
    g.addedge(curr_input[0],curr_input[1],curr_input[2])
g.prims()



