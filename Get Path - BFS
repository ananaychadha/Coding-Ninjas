import queue
class Graph:
    def __init__(self,v):
        self.v=v
        self.m=[[0 for i in range(v)] for j in range(v)]
    def addEdge(self, v1, v2):
        self.m[v1][v2] = 1
        self.m[v2][v1] = 1
        
    def getShortestPath(self, sv, ev):
        visited = [False for i in range(self.v)]
        parentDict = {
            sv: None
        }
        path = []
        q = queue.Queue()
        q.put(sv)
        visited[sv] = True
        while not q.empty():
            x = q.get()
            for i in range(self.v):
                if visited[i] is False and self.m[x][i] == 1:
                    q.put(i)
                    parentDict[i] = x
                    visited[i] = True
                    if i == ev:
                        path.append(i)
                        t = parentDict[i]
                        while t is not None:
                            path.append(t)
                            t = parentDict[t]
                        print(*path)
                        return
                    



v, e = [int(x) for x in input().split()]
g=Graph(v)

for i in range(e):
    a,b=[int(x) for x in input().split()]
    g.addEdge(a,b)

x,y=[int(x) for x in input().split()]
g.getShortestPath(x,y)

